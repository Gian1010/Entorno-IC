version: 2.1

jobs:
  test:
    docker:
      - image: cimg/node:18.17.1
    steps:
      - checkout
      - run: npm install
      - run:
          name: Run Tests
          command: npm test
      - run:
          name: Notify Slack on Success
          when: on_success
          command: |
            curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ ¡Los tests pasaron con éxito! 🎉"}' \
            $SLACK_WEBHOOK_URL_GIAN
      - run:
          name: Notify Slack on Failure
          when: on_fail
          command: |
            curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"❌ *Fallo en los tests* en CircleCI 🚨"}' \
            $SLACK_WEBHOOK_URL_GIAN
      - run:
          name: Send mail on tests success
          when: on_success
          command: |
            npm run sendmail -- "✅ Tests exitosos" "Los tests automatizados pasaron correctamente en CircleCI. ✅🎉"

      - run:
          name: Send mail on tests failure
          when: on_fail
          command: |
            npm run sendmail -- "❌ Error en tests" "Al menos uno de los tests automatizados falló en CircleCI. Revisión necesaria. ❌🧪"


  sonarcloud:
    docker:
      - image: cimg/node:18.17.1
    steps:
      - checkout
      - run: npm install
      - run:
          name: Instalar jq y dependencias
          command: |
            sudo apt-get update
            sudo apt-get install -y jq openjdk-17-jre-headless
      - run:
          name: Ejecutar análisis SonarCloud
          command: npx sonar-scanner
      - run:
          name: Verificar estado del Quality Gate
          command: |
            sleep 15
            STATUS=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=Gian1010_Entorno-IC" | jq -r '.projectStatus.status')
            if [ "$STATUS" != "OK" ]; then
              echo "❌ Quality Gate falló: $STATUS"
              curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"🚨 *El análisis de SonarCloud falló el Quality Gate.* Revisá: https://sonarcloud.io/project/overview?id=Gian1010_Entorno-IC"}' \
              $SLACK_WEBHOOK_URL_GIAN
              exit 1
            else
              echo "✅ Quality Gate pasó con Exito"
              curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"✅ *El código pasó el Quality Gate en SonarCloud.* ¡Excelente trabajo Gianfranco! 🎉🎉🎉\n🔗 https://sonarcloud.io/project/overview?id=Gian1010_Entorno-IC"}' \
              $SLACK_WEBHOOK_URL_GIAN
            fi
      - run:
          name: Send mail on SonarCloud success
          when: on_success
          command: |
            npm run sendmail -- "✅ SonarCloud: Quality Gate aprobado" "El análisis de calidad de código en SonarCloud fue exitoso. El proyecto pasó el Quality Gate correctamente. 🔗 https://sonarcloud.io/project/overview?id=Gian1010_Entorno-IC"

      - run:
          name: Send mail on SonarCloud failure
          when: on_fail
          command: |
            npm run sendmail -- "❌ SonarCloud: Quality Gate fallido" "El análisis de SonarCloud falló el Quality Gate. Es necesario revisar el informe: 🔗 https://sonarcloud.io/project/overview?id=Gian1010_Entorno-IC"


  deploy_render:
    docker:
      - image: cimg/node:18.17.1
    steps:
      - checkout
      - run: npm install
      - run:
          name: Trigger Deploy on Render
          command: |
            curl -X POST $RENDER_DEPLOY_HOOK_URL
      - run:
          name: Notify Slack on Success (Deploy)
          when: on_success
          command: |
            curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "✅ *Deploy exitoso en Render!* 🎉\n\n*Proyecto:* Entorno-IC\n*Branch:* '"$CIRCLE_BRANCH"'\n*Commit:* '"$CIRCLE_SHA1"'\n*Autor:* '"$CIRCLE_USERNAME"'\n\n🔗 https://entorno-ic-gian.onrender.com/"
            }' \
            $SLACK_WEBHOOK_URL_GIAN
      - run:
          name: Notify Slack on Failure (Deploy)
          when: on_fail
          command: |
            curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"❌ *El deploy en Render falló.* 🚨 Revisar en CircleCI: $CIRCLE_BUILD_URL\"}" \
            $SLACK_WEBHOOK_URL_GIAN
      - run:
          name: Send mail on Deploy success
          when: on_success
          command: |
            npm run sendmail -- "✅ Deploy exitoso en Render" "El despliegue fue exitoso. 🎉 Proyecto: Entorno-IC Branch: $CIRCLE_BRANCH Commit: $CIRCLE_SHA1 Autor: $CIRCLE_USERNAME 🔗 https://entorno-ic-gian.onrender.com/"

      - run:
          name: Send mail on Deploy Failure
          when: on_fail
          command: |
            npm run sendmail -- "❌ Deploy fallido en Render" "El despliegue falló en Render. 🚨 Revisar en CircleCI: $CIRCLE_BUILD_URL"

move_card_trello:
  docker:
    - image: curlimages/curl:latest
  steps:
    - checkout
    - run:
        name: Validar coincidencia de commit y tarjeta
        command: |
          COMMIT_MSG=$(git log -1 --pretty=%s)
          echo "Último commit: $COMMIT_MSG"

          CARD_NAME=$(curl -s "https://api.trello.com/1/cards/$TRELLO_CARD_ID?key=$TRELLO_KEY&token=$TRELLO_TOKEN" | jq -r '.name')
          echo "Nombre de la tarjeta: $CARD_NAME"

          if [ "$COMMIT_MSG" = "$CARD_NAME" ]; then
            echo "✅ Coinciden. Moviendo tarjeta y marcando como completada..."

            curl -X PUT "https://api.trello.com/1/cards/${TRELLO_CARD_ID}?idList=${TRELLO_LIST_ID_DONE}&key=${TRELLO_KEY}&token=${TRELLO_TOKEN}"
            curl -X PUT "https://api.trello.com/1/cards/$TRELLO_CARD_ID?key=$TRELLO_KEY&token=$TRELLO_TOKEN" \
              -d "dueComplete=true"
          else
            echo "⛔ No coinciden. No se realiza ninguna acción en Trello."
          fi

workflows:
  version: 2
  test_analyze_and_deploy:
    jobs:
      - test
      - sonarcloud:
          requires:
            - test
      - deploy_render:
          requires:
            - sonarcloud
      - move_card_trello:
          requires:
            - deploy_render





#Usa una imagen de Docker con Node.js 18.17.1.
#Clona tu código (checkout).
#Ejecuta npm install para instalar dependencias.
#Ejecuta npm test para correr tus pruebas con Mocha. error de test -> era por node_modules en el repo lo arregle con gitignore